schema {
  query: Query
  mutation: Mutation
}

type Query {
  getUsers: [User]!
}

type Mutation {
  signUp(
    email: String!
    password: String!
    name: String!
    bio: String
    department: String!
    position: String!
    workSpace: String!
    contact: String!
    birthday: String!
    enteredDate: String!
    remainLeaves: Int!
  ): AuthResponse!
  login(email: String!, password: String!): AuthResponse!
  me: AuthResponse!
  makeLeaveHistory(
    date: String!
    reason: String
    type: LeaveType!
  ): Boolean!
}

type AuthResponse {
  token: String!
  user: User!
}

type LeaveHistory {
  id: Int!
  user: User!
  date: Time!
  reason: String
  type: LeaveType!
  status: LeaveStatus!
  approver: User
  createdAt: Time!
  updatedAt: Time!
}

type User {
  id: Int!
  email: String!
  password: String!
  name: String!
  bio: String
  department: String!
  position: String!
  workSpace: String!
  contact: String!
  role: UserRole!
  status: UserStatus!
  profileImage: String!
  birthday: Time!
  enteredDate: Time!
  resignationDate: Time
  remainLeaves: Int!
  leaveHistories: [LeaveHistory]!
  createdAt: Time!
  updatedAt: Time!
}

scalar Time

enum LeaveType {
  day
  morning
  afternoon
}

enum LeaveStatus {
  applied
  accepted
  rejected
}

enum UserRole {
  master
  manager
  normal
}

enum UserStatus {
  inOffice
  resign
}


