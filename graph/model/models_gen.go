// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type LeaveHistory struct {
	ID        string `json:"id" gorm:"autoIncrement;primary_key"`
	User      *User  `json:"user" gorm:"not null"`
	Date      time.Time `json:"date" gorm:"not null"`
	CreatedAt time.Time `json:"createdAt" gorm:"not null;->"`
	UpdatedAt time.Time `json:"updatedAt" gorm:"not null"`
}

type User struct {
	ID             string          `json:"id" gorm:"primary_key;autoIncrement"`
	Email          string          `json:"email" gorm:"type:varchar(100);unique_index;not null"`
	Password       string          `json:"password" gorm:"not null"`
	Name           string          `json:"name" gorm:"size:32;not null"`
	Bio            *string         `json:"bio"`
	Role           UserRole        `json:"role" gorm:"not null"`
	ProfileImage    string          `json:"profileImage" gorm:"not null"`
	Birthday       string          `json:"birthday" gorm:"not null"`
	RemainLeaves   uint            `json:"remainLeaves" gorm:"not null"`
	LeaveHistories []*LeaveHistory `json:"leaveHistories" gorm:"not null"`
	CreatedAt      string          `json:"createdAt" gorm:"not null;->"`
	UpdatedAt      string          `json:"updatedAt" gorm:"not null"`
}

type UserRole string

const (
	UserRoleManager UserRole = "manager"
	UserRoleNormal  UserRole = "normal"
)

var AllUserRole = []UserRole{
	UserRoleManager,
	UserRoleNormal,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleManager, UserRoleNormal:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
