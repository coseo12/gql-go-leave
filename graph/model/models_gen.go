// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type LeaveHistory struct {
	ID        string `json:"id"`
	User      *User  `json:"user"`
	Date      string `json:"date"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
}

type User struct {
	ID             string          `json:"id"`
	Email          string          `json:"email"`
	Password       string          `json:"password"`
	Name           string          `json:"name"`
	Bio            *string         `json:"bio"`
	Role           *UserRole       `json:"role"`
	ProfileImage   string          `json:"profileImage"`
	Birthday       *string         `json:"birthday"`
	CreatedAt      string          `json:"CreatedAt"`
	UpdatedAt      string          `json:"UpdatedAt"`
	RemainLeaves   int             `json:"RemainLeaves"`
	LeaveHistories []*LeaveHistory `json:"leaveHistories"`
}

type UserRole string

const (
	UserRoleManager UserRole = "manager"
	UserRoleNormal  UserRole = "normal"
)

var AllUserRole = []UserRole{
	UserRoleManager,
	UserRoleNormal,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleManager, UserRoleNormal:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
